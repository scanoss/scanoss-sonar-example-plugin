package com.scanoss.plugins.sonar.measures.processors;

import com.scanoss.dto.ScanFileDetails;
import com.scanoss.dto.VulnerabilityDetails;
import com.scanoss.plugins.sonar.measures.ScanOSSMetrics;
import org.sonar.api.batch.fs.InputFile;
import org.sonar.api.batch.sensor.SensorContext;
import org.sonar.api.utils.log.Logger;
import org.sonar.api.utils.log.Loggers;

/**
 * Vulnerability Details Measure Processor
 */
public class VulnerabilityDetailsProcessor implements MeasureProcessor {

    /**
     * Creates empty VulnerabilityDetailsProcessor
     */
    public VulnerabilityDetailsProcessor(){
    }

    /**
     * The logger object for the measure processor.
     */
    private final Logger log = Loggers.get(this.getClass());

    /**
     * Saves Vulnerability data
     * @param sensorContext Sonar Sensor Context
     * @param file Project file
     * @param scanData File's scan result
     */
    @Override
    public void processScanDetails(SensorContext sensorContext, InputFile file, ScanFileDetails scanData) {
        VulnerabilityDetails[] vulnerabilities = scanData.getVulnerabilityDetails();

        int vulnerabilityCount = 0;
        if (vulnerabilities != null) {
            vulnerabilityCount = vulnerabilities.length;
        }

        log.info("[SCANOSS] Vulnerabilities found for file '{}': {}", file.filename(), vulnerabilityCount);
        sensorContext.<Integer>newMeasure()
                .forMetric(ScanOSSMetrics.VULNERABILITY_COUNT)
                .on(file)
                .withValue(vulnerabilityCount)
                .save();
    }
}
